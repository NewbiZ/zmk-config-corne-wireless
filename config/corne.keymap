/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&sk { quick-release; };

/ {
    behaviors {
        td_sk_shift_capsword: td_sk_shift_capsword {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SK_SHIFT_CAPSWORD";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&sk LEFT_SHIFT>, <&caps_word>;
        };

        morph_alt_q_1: morph_alt_q_1 {
            compatible = "zmk,behavior-mod-morph";
            label = "morph_alt_q_1";
            bindings = <&kp Q>, <&kp NUMBER_1>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };

        morph_alt_w_2: morph_alt_w_2 {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_ALT_W_2";
            bindings = <&kp W>, <&kp NUMBER_2>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };

        morph_alt_e_3: morph_alt_e_3 {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_ALT_E_3";
            bindings = <&kp E>, <&kp NUMBER_3>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };

        morph_alt_r_4: morph_alt_r_4 {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_ALT_R_4";
            bindings = <&kp R>, <&kp NUMBER_4>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };

        morph_alt_t_5: morph_alt_t_5 {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_ALT_T_5";
            bindings = <&kp T>, <&kp NUMBER_5>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };

        morph_alt_y_6: morph_alt_y_6 {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_ALT_Y_6";
            bindings = <&kp Y>, <&kp NUMBER_6>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };

        morph_alt_u_7: morph_alt_u_7 {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_ALT_U_7";
            bindings = <&kp U>, <&kp NUMBER_7>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };

        morph_alt_i_8: morph_alt_i_8 {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_ALT_I_8";
            bindings = <&kp I>, <&kp NUMBER_8>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };

        morph_alt_o_9: morph_alt_o_9 {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_ALT_O_9";
            bindings = <&kp O>, <&kp NUMBER_9>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };

        morph_alt_p_0: morph_alt_p_0 {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_ALT_P_0";
            bindings = <&kp P>, <&kp NUMBER_0>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };

        morph_alt_esc_shift_q: morph_alt_esc_shift_q {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_ALT_ESC_SHIFT_Q";
            bindings = <&kp ESCAPE>, <&kp LS(Q)>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };

        morph_alt_space_shift_space: morph_alt_space_shift_space {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_ALT_SPACE_SHIFT_SPACE";
            bindings = <&kp SPACE>, <&kp LS(SPACE)>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };

        morph_alt_x_shift_e: morph_alt_x_shift_e {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_ALT_X_SHIFT_E";
            bindings = <&kp X>, <&kp LS(E)>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };

        td_backslash_lock: td_backslash_lock {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_BACKSLASH_LOCK";
            #binding-cells = <0>;
            bindings = <&kp BACKSLASH>, <&kp LA(L)>;

            tapping-term-ms = <150>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_enter {
            bindings = <&kp RETURN>;
            key-positions = <19 20>;
        };

        combo_nav_kbd {
            bindings = <&mo 4>;
            key-positions = <16 15>;
        };

        combo_nav_m {
            bindings = <&mo 5>;
            key-positions = <16 15 14>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Qwerty {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            display-name = "Qwerty";
            bindings = <
&morph_alt_esc_shift_q  &morph_alt_q_1  &morph_alt_w_2        &morph_alt_e_3  &morph_alt_r_4         &morph_alt_t_5                  &morph_alt_y_6  &morph_alt_u_7  &morph_alt_i_8  &morph_alt_o_9  &morph_alt_p_0  &td_backslash_lock
&kp TAB                 &kp A           &kp S                 &kp D           &kp F                  &kp G                           &kp H           &kp J           &kp K           &kp L           &kp SEMI        &kp SQT
&kp LEFT_CONTROL        &kp Z           &morph_alt_x_shift_e  &kp C           &kp V                  &kp B                           &kp N           &kp M           &kp COMMA       &kp DOT         &kp FSLH        &mo 3
                                                              &kp LEFT_ALT    &td_sk_shift_capsword  &morph_alt_space_shift_space    &kp BACKSPACE   &mo 1           &mo 2
            >;
        };

        Numbers {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &kp COMMA     &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp DOT       &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans
                        &trans  &trans  &trans    &trans        &trans        &trans
            >;

            label = "Numbers";
        };

        Symbols {
            bindings = <
&trans  &kp EXCLAMATION  &kp AT_SIGN       &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PIPE     &kp TILDE  &kp MINUS  &kp UNDERSCORE  &kp ASTERISK   &trans  &trans
&trans  &kp HASH         &kp DOLLAR        &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp GRAVE    &trans     &kp COLON  &kp CARET       &kp PERCENT    &trans  &trans
&trans  &kp LESS_THAN    &kp GREATER_THAN  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans       &trans     &kp PLUS   &kp EQUAL       &kp AMPERSAND  &trans  &trans
                                           &trans                &trans                 &trans       &trans     &trans     &trans
            >;

            label = "Symbols";
        };

        Magic {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR    &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans
                                          &trans        &trans        &trans        &trans  &trans  &trans
            >;

            label = "Magic";
        };

        Navigation_KBD {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans          &kp UP_ARROW    &trans           &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans          &trans          &trans           &trans  &trans
                        &trans  &trans  &trans    &trans  &trans          &trans
            >;

            label = "Navigation_KBD";
        };

        Navigation_M {
            label = "Navigation_M";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans     &trans          &mmv MOVE_UP    &trans           &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans     &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans     &trans          &trans          &trans           &trans  &trans
                        &trans  &trans  &trans    &mkp LCLK  &mkp MCLK       &mkp RCLK
            >;
        };
    };
};
